[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Data Science",
    "section": "",
    "text": "This is a data science book for beginners. This book contains the basic Python and R programming skills to start your career as a data scientist. You can dive into the amazing data science world by using Python and R. Learn how to effectively analyze and visualize your data. No coding experience or skills needed. Data Science is about data gathering, analysis and decision-making. Data Science is used in many industries in the world today, e.g. banking, consultancy, healthcare, and manufacturing. Data science is not a one-step process such that will get to learned it in a short time. It’s passes from many stages and every element is important. One should always follow the proper steps to reach the ladder. Every step has its value and it counts in your model."
  },
  {
    "objectID": "Python.html",
    "href": "Python.html",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "There are three things we need to run the code in this lecture:\n\nPython 3.10 (https://www.python.org/downloads/)\nPyCharm community or professional (https://www.jetbrains.com/pycharm/)\nA handful of other packages"
  },
  {
    "objectID": "Python.html#variables",
    "href": "Python.html#variables",
    "title": "1  Introduction to Python",
    "section": "1.2 Variables",
    "text": "1.2 Variables\n\nLet’s start using a variable\nVariable names can contain only letters, numbers and underscores\nSpace are not allowed in variable name\nVariables name should be short and descriptive\n\nmessage = \"Hello world!\"\nprint(message)\n\nHello world!"
  },
  {
    "objectID": "Python.html#strings",
    "href": "Python.html#strings",
    "title": "1  Introduction to Python",
    "section": "1.3 Strings",
    "text": "1.3 Strings\n\nA string is a series of characters\nIn python, anything inside a quotes is considered a string\nWe can use single or double quotes around the strings\n\nmessage = \"Python is a programming language\"\nprint(message)\n\nPython is a programming language\n\nmessage = 'I told my friend, \"Python is a programming language\"'\nprint(message)\n\nI told my friend, “Python is a programming language”\n\n\n1.3.1 Change case of string\n\nA lower case string can be changed to a title\n\nname = \"moinul islam\"\nprint(name.title())\n\nMoinul Islam\n\n\nWe can also change the string to all upper or all lower\n\nname = \"moinul islam\"\nprint(name.upper())\n\nMOINUL ISLAM"
  },
  {
    "objectID": "Python.html#numbers",
    "href": "Python.html#numbers",
    "title": "1  Introduction to Python",
    "section": "1.4 Numbers",
    "text": "1.4 Numbers\n\nNumbers are used quite often in python\n\nIntegers: We can add (+), multiply (*), exponent (**), and divide (/) integers in Python\n\nprint(2+3)\n\n5\n\nprint(3-2)\n\n1\n\nprint(2*3)\n\n6\n\nprint(3**3)\n\n27\n\nprint(3/2)\n\n1.5\n\n\nPython supports the order of operation too.\n\nprint(2 + 3*4)\n\n14\n\nprint((2+3)*4)\n\n20\n\n\nFloats: Python calls any number with a decimal point a float\n\nprint(2*0.2)\n\n0.4\n\n\nIntegers and floats: When we divide two numbers, even if they are integers, you will always get a float\n\nprint(4/2)\n\n2.0\n\nUnderscore in numbers\n\nWhen you are writing long numbers, you can group digits using underscores\n\nuniverse_age = 14_000_000_000\nprint(universe_age)\n\n14000000000\n\nMultiple assignments\n\nWe can assign the value to more than one variables using just a single line\n\nx, y, z = 12, 3, 5\nprint(x, y, z)\nprint(z)\n\n12 3 5\n\n\n5\n\nConstants\n\nA constant is a variable whose value stay the same throughout the life of a program.\nPython does not have built in command for constant\nHowever, a variable name with all capital letters treated as constant\n\n\nELON_MASK  = 1_000_000_000_000\nprint(ELON_MASK)\n\n1000000000000"
  },
  {
    "objectID": "Python.html#comments",
    "href": "Python.html#comments",
    "title": "1  Introduction to Python",
    "section": "1.5 Comments",
    "text": "1.5 Comments\n\nIn Python, hash (#) indicates a comment.\nAnything following a # mark in your code is ignored by Python\n\n# Say hello to your friends\nprint(\"Hello friends\")\n\nHello friends"
  },
  {
    "objectID": "Python.html#lists",
    "href": "Python.html#lists",
    "title": "1  Introduction to Python",
    "section": "1.6 Lists",
    "text": "1.6 Lists\n\nList the elements of a variable\n\nbicycles = [\"trek\", \"cannondale\", \"redline\", \"specialized\"]\nprint(bicycles)\n\n[‘trek’, ‘cannondale’, ‘redline’, ‘specialized’]\n\n\nAccess an element from a list\n\nbicycles = [\"trek\", \"cannondale\", \"redline\", \"specialized\"]\nprint(bicycles[0])\n\ntrek\n\n\n1.6.1 Neat outcome\n\nYou can format the element “trek” even more neatly by using title() method\n\nbicycles = [\"trek\", \"cannondale\", \"redline\", \"specialized\"]\nprint(bicycles[0].title())\n\nTrek\n\n\n\n1.6.2 Print string\n\nYou can print the strings that you are interested\nIt starts counting from zero\n\nbicycles = [\"trek\", \"cannondale\", \"redline\", \"specialized\"]\nprint(bicycles[1])\n\ncannondale\n\n\nPython has special syntax to call the last item of a list\n\nbicycles = [\"trek\", \"cannondale\", \"redline\", \"specialized\"]\nprint(bicycles[-1])\n\nspecialized"
  },
  {
    "objectID": "Python.html#functions",
    "href": "Python.html#functions",
    "title": "1  Introduction to Python",
    "section": "1.7 Functions",
    "text": "1.7 Functions\nbicycles = [\"trek\", \"cannondale\", \"redline\", \"specialized\"]\nmessage = f\"my first bicycle was a {bicycles[0].title()}\"\nprint(message)\n\nmy first bicycle was a Trek\n\n\nModifying elements in a list"
  },
  {
    "objectID": "R.html",
    "href": "R.html",
    "title": "2  Introduction to R",
    "section": "",
    "text": "There are four things we need to run the code in this lecture:\n\nR (https://www.r-project.org/)\nRStudio (https://www.rstudio.com/products/rstudio/download/)\nA collection of R packages called the tidyverse (https://www.tidyverse.org/)\nA handful of other packages"
  },
  {
    "objectID": "R.html#use-necessary-libraries",
    "href": "R.html#use-necessary-libraries",
    "title": "2  Introduction to R",
    "section": "2.2 Use necessary libraries",
    "text": "2.2 Use necessary libraries\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\nlibrary(\"nycflights13\")\nlibrary(\"gapminder\")\nlibrary(\"Lahman\")"
  },
  {
    "objectID": "R.html#running-r-code",
    "href": "R.html#running-r-code",
    "title": "2  Introduction to R",
    "section": "2.3 Running R code",
    "text": "2.3 Running R code"
  }
]